{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","cornichon/tests/app.lint-test.js","cornichon/tests/helpers/ember-simple-auth.js","cornichon/tests/test-helper.js","cornichon/tests/tests.lint-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('cornichon/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/gist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/gist.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/md5-color.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/md5-color.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('macros/bool.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'macros/bool.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/file.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/file.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/gist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/gist.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/scenario.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/scenario.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/components/feature-file/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/feature-file/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/gist/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/gist/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/gist/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/gist/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/gist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/gist.js should pass ESLint\\n\\n');\n  });\n});","define('cornichon/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const { __container__: container } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return app.testHelpers.wait();\n  }\n});","define('cornichon/tests/test-helper', ['cornichon/app', 'cornichon/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('cornichon/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define('cornichon/config/environment', [], function() {\n  var prefix = 'cornichon';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('cornichon/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}